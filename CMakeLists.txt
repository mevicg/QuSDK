cmake_minimum_required( VERSION 3.15 )

if( UNIX AND NOT APPLE )
	set( QU_API_LINUX TRUE )
endif()
if( WIN32 )
	set( QU_API_WINDOWS TRUE )
endif()
if( APPLE )
	set( QU_API_MACOS TRUE )
endif()

#We detect whether or not we are the root cmake project. If we are the root project we default to include building the examples.
#If we aren't the root however then our cmake is being included and that's most likely done just to access the api, so then we dont
#build examples by default.
set( QU_API_IS_ROOT_PROJECT OFF )
if( CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR )
	set( QU_API_IS_ROOT_PROJECT ON )
endif()

set( CMAKE_CXX_STANDARD 20 )
#Settings that Must/Can be done BEFORE project()
if( QU_API_WINDOWS )
	add_definitions( -DUNICODE )
elseif( QU_API_MACOS )
	#macOS doesn't support a dynamic c++ runtime and as such the available runtime is tied directly
	#to the os version. As such we require a pretty recent macos version so that everything is available
	#to the example. If you're using the api directly you dont need a target this high.
	set( CMAKE_OSX_DEPLOYMENT_TARGET "10.15" CACHE STRING "Minimum macOS deployment version" )
elseif( LINUX )
endif()

project( QuSdk LANGUAGES C CXX )
set_property( GLOBAL PROPERTY USE_FOLDERS ON )
set( CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake" )

#Settings that Must be done AFTER project()
if( QU_API_WINDOWS )
	if( MSVC )
		#Without this setting MSVC projects generated by cmake dont contain absolute paths so the contents of the __FILE__ macro would be incorrect.
		set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /FC" )
		#Use multiple cpu cores to compile a single target.
		set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /MP" )
	endif()
elseif( QU_API_MACOS )
elseif( QU_API_LINUX )
endif()

#Cmake doesn't define DEBUG in debug builds by default. We need this to detect
#which behaviour we desire in code. Using NDEBUG is not an option because that one
#is only defined to affect how assert behaves, so there's no exact coupling with
#debug/release configurations.
add_compile_options( "$<$<CONFIG:DEBUG>:-DDEBUG>" )

OPTION( QU_API_INSTRUMENT "Whether or not Qumulus instrumentation should be enabled." ON )

if( QU_API_INSTRUMENT )
	#QuApi is only implemented for windows, macos and linux.
	if( QU_API_WINDOWS OR QU_API_MACOS OR QU_API_LINUX )
		message( "QuApi enabled" )
	else()
		message( FATAL_ERROR "QuApi is enabled on unsupported platform" )
	endif()
else()
	message( "QuApi disabled" )
endif()

add_subdirectory( "api/" )
add_subdirectory( "loader/" )
OPTION( QU_API_BUILD_EXAMPLES "Whether or not QuApi examples should be built." ${QU_API_IS_ROOT_PROJECT} )
if( QU_API_BUILD_EXAMPLES )
	add_subdirectory( "example/" )
endif()